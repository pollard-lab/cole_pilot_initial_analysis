require(ggplot2)
require(VennDiagram)
input_countdata <- read.table("/media/pollardlab/POLLARDLAB3/cole_pilot_initial_analysis/step3_counting/counting_output_files/combined_counts_Cole.txt", header=TRUE, row.names=1)  # load count data
View(input_countdata)
input_countdata <- read.table("/media/pollardlab/POLLARDLAB3/cole_pilot_initial_analysis/step3_counting/counting_output_files/combined_counts_Cole.txt", header=TRUE, row.names=1)  # load count data
input_custom <- subset(data.frame(input_countdata), grepl(":", rownames(input_countdata)))  # extract custom annotations
countdata <- input_countdata[6:ncol(input_countdata)]  # Remove first five columns (chr, start, end, strand, length)
# results_GOI <- subset(data.frame(countdata), rownames(data.frame(countdata)) %in% Genes_of_interest$Gene)
res_custom <- subset(data.frame(countdata), grepl(":", rownames(countdata)))
N_total_reads_mapped = 40947455  #(30.71%, 39935535) aligned exactly 1 time + (0.78%, 1011920) aligned >1 times
n_observed_custom_annotations = sum(res_custom$X.media.pollardlab.POLLARDLAB3.Cole_data.STEP2_ALIGNMENT_COUNTING.Cole_Pilot_001_S5_R1_001_unique_and_all.sam)
n_observed_not_custom_annotations = N_total_reads_mapped - n_observed_custom_annotations
sum_length_of_custom_anotations = sum(input_custom$Length)/2
# length_of_genome = 103014375
length_of_transcriptime = sum(input_countdata$Length)
l_length_percentage_custom_annotations = sum_length_of_custom_anotations/length_of_transcriptime
l_length_percentage_not_custom_annotations = 1-l_length_percentage_custom_annotations
X2_results <- chisq.test(c(n_observed_custom_annotations,n_observed_not_custom_annotations), p = c(l_length_percentage_custom_annotations,l_length_percentage_not_custom_annotations))
X2_results
expected_val = N_total_reads_mapped * l_length_percentage_custom_annotations
n_observed_custom_annotations
expected_val
n_observed_custom_annotations > expected_val
# Run Chi Squared Analysis------------------------------------------------------------------------------------
#import data and organize table
input_countdata <- read.table("/media/pollardlab/POLLARDLAB3/cole_pilot_initial_analysis/step3_counting/counting_output_files/combined_counts_Cole.txt", header=TRUE, row.names=1)  # load count data
input_custom <- subset(data.frame(input_countdata), grepl(":", rownames(input_countdata)))  # extract custom annotations
countdata <- input_countdata[6:ncol(input_countdata)]  # Remove first five columns (chr, start, end, strand, length)
countdata_subset_custom_annotations <- subset(data.frame(countdata), grepl(":", rownames(countdata)))
N_total_reads_mapped_to_MAC = 40947455  #(30.71%, 39935535) aligned exactly 1 time + (0.78%, 1011920) aligned >1 times
n_observed_custom_annotations = sum(countdata_subset_custom_annotations$X.media.pollardlab.POLLARDLAB3.Cole_data.STEP2_ALIGNMENT_COUNTING.Cole_Pilot_001_S5_R1_001_unique_and_all.sam)
n_observed_not_custom_annotations = N_total_reads_mapped_to_MAC - n_observed_custom_annotations
sum_length_of_custom_anotations = sum(input_custom$Length)/2
# length_of_genome = 103014375
length_of_transcriptime = sum(input_countdata$Length)
l_length_percentage_custom_annotations = sum_length_of_custom_anotations/length_of_transcriptime
l_length_percentage_not_custom_annotations = 1-l_length_percentage_custom_annotations
X2_results <- chisq.test(c(n_observed_custom_annotations,n_observed_not_custom_annotations), p = c(l_length_percentage_custom_annotations,l_length_percentage_not_custom_annotations))
X2_results
expected_val = N_total_reads_mapped_to_MAC * l_length_percentage_custom_annotations
n_observed_custom_annotations
expected_val
n_observed_custom_annotations > expected_val  # returns false so
require(ggplot2)
input_countdata <- read.table("/media/pollardlab/POLLARDLAB3/cole_pilot_initial_analysis/step3_counting/counting_output_files/combined_counts_Cole.txt", header=TRUE, row.names=1)  # load count data
View(input_countdata)
input_custom <- subset(data.frame(input_countdata), grepl(":", rownames(input_countdata)))  # extract custom annotations
View(input_custom)
countdata <- input_countdata[6:ncol(input_countdata)]  # Remove first five columns (chr, start, end, strand, length)
countdata_subset_custom_annotations <- subset(data.frame(countdata), grepl(":", rownames(countdata)))
View(countdata_subset_custom_annotations)
View(input_custom)
input_countdata <- read.table("/media/pollardlab/POLLARDLAB3/cole_pilot_initial_analysis/step3_counting/counting_output_files/combined_counts_Cole.txt", header=TRUE, row.names=1)  # load count data
countdata_subset_custom_annotations <- subset(data.frame(input_countdata), grepl(":", rownames(input_countdata)))  # make a subset of the countdata table with only the custom annotations (annnotaions that presumably lead to sRNA precursors)
countdata <- input_countdata[6:ncol(input_countdata)]  # Remove first five columns (chr, start, end, strand, length)
N_total_reads_mapped_to_MAC = 40947455  #(30.71%, 39935535) aligned exactly 1 time + (0.78%, 1011920) aligned >1 times
n_observed_custom_annotations = sum(countdata_subset_custom_annotations$X.media.pollardlab.POLLARDLAB3.Cole_data.STEP2_ALIGNMENT_COUNTING.Cole_Pilot_001_S5_R1_001_unique_and_all.sam)
typeof(n_observed_custom_annotations)
n_observed_custom_annotations
require(ggplot2)
input_countdata <- read.table("/media/pollardlab/POLLARDLAB3/cole_pilot_initial_analysis/step3_counting/counting_output_files/combined_counts_Cole.txt", header=TRUE, row.names=1)  # load count data
countdata_subset_custom_annotations <- subset(data.frame(input_countdata), grepl(":", rownames(input_countdata)))  # make a subset of the countdata table with only the custom annotations (annnotaions that presumably lead to sRNA precursors)
countdata <- input_countdata[6:ncol(input_countdata)]  # Remove first five columns (chr, start, end, strand, length)
N_total_reads_mapped_to_MAC = 40947455  #(30.71%, 39935535) aligned exactly 1 time + (0.78%, 1011920) aligned >1 times
n_observed_custom_annotations = sum(countdata_subset_custom_annotations$X.media.pollardlab.POLLARDLAB3.Cole_data.STEP2_ALIGNMENT_COUNTING.Cole_Pilot_001_S5_R1_001_unique_and_all.sam)
n_observed_not_custom_annotations = N_total_reads_mapped_to_MAC - n_observed_custom_annotations
#Generating Read Mapping Pie Chart-------------------------------------------------------------------------------
# list number of reads from alignment reports (see step 2)
num_of_reads_after_qc <- 130031925
num_of_mapped_MAC_unique_total <- 39935535
num_of_mapped_MAC_multi_total <- 1011920
num_of_mapped_MAC_unique_specific <- 38977414
num_of_mapped_MAC_multi_specific <- 274386
num_of_mapped_MIC_unique_total <- 2154272
num_of_mapped_MIC_multi_total <- 861142
num_of_mapped_MIC_unique_specific <- 1117275
num_of_mapped_MIC_multi_specific <- 202484
num_of_nonmappers <- 87764711
# calculate the number of reads (unique or multimappers) that aligned to both MAC and MIC
num_of_mapped_MAC_and_MIC <- abs(num_of_mapped_MAC_unique_total - num_of_mapped_MAC_unique_specific) + abs(num_of_mapped_MAC_multi_total - num_of_mapped_MAC_multi_specific)
# place values of interst into data frame
df_all_reads <- data.frame(groups = c("MAC uniquely mapped reads", "MAC multi-mapped reads", "MIC uniquely mapped reads", "MIC multi-mapped reads","MAC and MIC (unique and multimappers)", "unmapped reads"),
number_of_reads = c(num_of_mapped_MAC_unique_specific,num_of_mapped_MAC_multi_specific,num_of_mapped_MIC_unique_specific,num_of_mapped_MIC_multi_specific,num_of_mapped_MAC_and_MIC,num_of_nonmappers))
# calculate the percentages for each group
percentages <- paste(c(df_all_reads$number_of_reads/sum(df_all_reads$number_of_reads))*100)
percentages <- paste0(substr(percentages, 1,5),"%")
df_all_reads$groups <- paste(df_all_reads$groups, percentages, sep=", ")
# set to order of the dataframe so the pie chart reads in the correct order
df_all_reads$groups <- factor(df_all_reads$groups, levels = df_all_reads$groups)
# making pie chart
blank_theme <- theme_minimal()+
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.border = element_blank(),
panel.grid=element_blank(),
axis.ticks = element_blank(),
plot.title=element_text(size=14, face="bold",hjust = 0.5))
read_mapping_pie_chart <- ggplot(df_all_reads, aes(x="", y=number_of_reads, fill=groups))+
geom_bar(width = 1, stat = "identity") +
coord_polar("y", start=0) +
scale_fill_manual(values=c( "blue", "steelblue1","red","tomato","darkolivegreen3","gray")) +
blank_theme +
theme(axis.text.x=element_blank()) +
ggtitle("Mapping percentages of all reads") +
labs(fill="")  # leave blank label for the legend key
read_mapping_pie_chart
num_of_counts_MAC_custom_annotations <- 1
num_of_counts_MAC_other_annotations <- 5
num_of_counts_MAC_no_annotations <- 94
df_all_counts <- data.frame(groups = c("MAC custom annotation counts", "MAC other gene counts", "MAC no annotation counts"),
number_of_counts = c(num_of_counts_MAC_custom_annotations,num_of_counts_MAC_other_annotations,num_of_counts_MAC_no_annotations))
count_percentages <- paste(c(df_all_counts$number_of_counts/sum(df_all_reads$number_of_counts))*100)
count_percentages <- paste0(substr(count_percentages, 1,5),"%")
count_percentages <- paste(c(df_all_counts$number_of_counts/sum(df_all_reads$number_of_counts))*100)
df_all_counts <- data.frame(groups = c("MAC custom annotation counts", "MAC other gene counts", "MAC no annotation counts"),
number_of_counts = c(num_of_counts_MAC_custom_annotations,num_of_counts_MAC_other_annotations,num_of_counts_MAC_no_annotations))
count_percentages <- paste(c(df_all_counts$number_of_counts/sum(df_all_counts$number_of_counts))*100)
count_percentages <- paste0(substr(count_percentages, 1,5),"%")
#Generating Read Counting Pie Chart----------------------------------------------------------------------------------------------
#list numbers from counting reports (see step 3)
num_of_counts_MAC_custom_annotations <- 1
num_of_counts_MAC_other_annotations <- 5
num_of_counts_MAC_no_annotations <- 94
# place values of interst into data frame
df_all_counts <- data.frame(groups = c("MAC custom annotation counts", "MAC other gene counts", "MAC no annotation counts"),
number_of_counts = c(num_of_counts_MAC_custom_annotations,num_of_counts_MAC_other_annotations,num_of_counts_MAC_no_annotations))
count_percentages <- paste(c(df_all_counts$number_of_counts/sum(df_all_counts$number_of_counts))*100)
count_percentages <- paste0(substr(count_percentages, 1,5),"%")
df_all_counts$groups <- paste(df_all_counts$groups, count_percentages, sep=", ")
# set to order of the dataframe so the pie chart reads in the correct order
df_all_counts$groups <- factor(df_all_counts$groups, levels = df_all_counts$groups)
# making pie chart
blank_theme <- theme_minimal()+
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.border = element_blank(),
panel.grid=element_blank(),
axis.ticks = element_blank(),
plot.title=element_text(size=14, face="bold",hjust = 0.5))
read_counting_pie_chart <- ggplot(df_all_counts, aes(x="", y=number_of_counts, fill=groups))+
geom_bar(width = 1, stat = "identity") +
coord_polar("y", start=0) +
scale_fill_manual(values=c( "blue", "red", "gray")) +
blank_theme +
theme(axis.text.x=element_blank()) +
ggtitle("Counting percentages for all MAC mapped reads") +
labs(fill="")
read_counting_pie_chart
a#R version 3.4.4
require(ggplot2)
# Run Chi Squared Analysis------------------------------------------------------------------------------------
#import data and organize table
input_countdata <- read.table("/media/pollardlab/POLLARDLAB3/cole_pilot_initial_analysis/step3_counting/counting_output_files/combined_counts_Cole.txt", header=TRUE, row.names=1)  # load count data
countdata_subset_custom_annotations <- subset(data.frame(input_countdata), grepl(":", rownames(input_countdata)))  # make a subset of the countdata table with only the custom annotations (annnotaions that presumably lead to sRNA precursors)
countdata <- input_countdata[6:ncol(input_countdata)]  # Remove first five columns (chr, start, end, strand, length)
# get the number of reads mapped to custom annotations (in reads, integers)
N_total_reads_mapped_to_MAC = 40947455  #(30.71%, 39935535) aligned exactly 1 time + (0.78%, 1011920) aligned >1 times
n_observed_custom_annotations = sum(countdata_subset_custom_annotations$X.media.pollardlab.POLLARDLAB3.Cole_data.STEP2_ALIGNMENT_COUNTING.Cole_Pilot_001_S5_R1_001_unique_and_all.sam)
n_observed_not_custom_annotations = N_total_reads_mapped_to_MAC - n_observed_custom_annotations
# get the lengths (in nts, integers)
sum_length_of_custom_anotations = sum(countdata_subset_custom_annotations$Length)/2  # every custom annotation has a plus and a minus strand reported
length_of_transcriptime = sum(input_countdata$Length)
# get the proportions of the genome that the custom and not custom annotations
l_length_proportion_custom_annotations = sum_length_of_custom_anotations/length_of_transcriptime
l_length_proportion_not_custom_annotations = 1-l_length_proportion_custom_annotations
X2_results <- chisq.test(c(n_observed_custom_annotations, n_observed_not_custom_annotations), p = c(l_length_proportion_custom_annotations,l_length_proportion_not_custom_annotations))
X2_results
expected_val = N_total_reads_mapped_to_MAC * l_length_proportion_custom_annotations
n_observed_custom_annotations
expected_val
n_observed_custom_annotations > expected_val  # returns false so, there is no enrichment of Lee custom annotations given the proportion of the transcriptome that the annotaitons take up
#Generating Read Mapping Pie Chart-------------------------------------------------------------------------------
# list number of reads from alignment reports (see step 2)
num_of_reads_after_qc <- 130031925
num_of_mapped_MAC_unique_total <- 39935535
num_of_mapped_MAC_multi_total <- 1011920
num_of_mapped_MAC_unique_specific <- 38977414
num_of_mapped_MAC_multi_specific <- 274386
num_of_mapped_MIC_unique_total <- 2154272
num_of_mapped_MIC_multi_total <- 861142
num_of_mapped_MIC_unique_specific <- 1117275
num_of_mapped_MIC_multi_specific <- 202484
num_of_nonmappers <- 87764711
# calculate the number of reads (unique or multimappers) that aligned to both MAC and MIC
num_of_mapped_MAC_and_MIC <- abs(num_of_mapped_MAC_unique_total - num_of_mapped_MAC_unique_specific) + abs(num_of_mapped_MAC_multi_total - num_of_mapped_MAC_multi_specific)
# place values of interst into data frame
df_all_reads <- data.frame(groups = c("MAC uniquely mapped reads", "MAC multi-mapped reads", "MIC uniquely mapped reads", "MIC multi-mapped reads","MAC and MIC (unique and multimappers)", "unmapped reads"),
number_of_reads = c(num_of_mapped_MAC_unique_specific,num_of_mapped_MAC_multi_specific,num_of_mapped_MIC_unique_specific,num_of_mapped_MIC_multi_specific,num_of_mapped_MAC_and_MIC,num_of_nonmappers))
# calculate the percentages for each group
read_percentages <- paste(c(df_all_reads$number_of_reads/sum(df_all_reads$number_of_reads))*100)
read_percentages <- paste0(substr(read_percentages, 1,5),"%")
df_all_reads$groups <- paste(df_all_reads$groups, read_percentages, sep=", ")
# set to order of the dataframe so the pie chart reads in the correct order
df_all_reads$groups <- factor(df_all_reads$groups, levels = df_all_reads$groups)
# making pie chart
blank_theme <- theme_minimal()+
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.border = element_blank(),
panel.grid=element_blank(),
axis.ticks = element_blank(),
plot.title=element_text(size=14, face="bold",hjust = 0.5))
read_mapping_pie_chart <- ggplot(df_all_reads, aes(x="", y=number_of_reads, fill=groups))+
geom_bar(width = 1, stat = "identity") +
coord_polar("y", start=0) +
scale_fill_manual(values=c( "blue", "steelblue1","red","tomato","darkolivegreen3","gray")) +
blank_theme +
theme(axis.text.x=element_blank()) +
ggtitle("Mapping percentages of all reads") +
labs(fill="")  # leave blank label for the legend key
read_mapping_pie_chart
#Generating Read Counting Pie Chart----------------------------------------------------------------------------------------------
#list numbers from counting reports (see step 3)
num_of_counts_MAC_custom_annotations <- 1
num_of_counts_MAC_other_annotations <- 5
num_of_counts_MAC_no_annotations <- 94
# place values of interst into data frame
df_all_counts <- data.frame(groups = c("MAC custom annotation counts", "MAC other gene counts", "MAC no annotation counts"),
number_of_counts = c(num_of_counts_MAC_custom_annotations,num_of_counts_MAC_other_annotations,num_of_counts_MAC_no_annotations))
count_percentages <- paste(c(df_all_counts$number_of_counts/sum(df_all_counts$number_of_counts))*100)
count_percentages <- paste0(substr(count_percentages, 1,5),"%")
df_all_counts$groups <- paste(df_all_counts$groups, count_percentages, sep=", ")
# set to order of the dataframe so the pie chart reads in the correct order
df_all_counts$groups <- factor(df_all_counts$groups, levels = df_all_counts$groups)
# making pie chart
blank_theme <- theme_minimal()+
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.border = element_blank(),
panel.grid=element_blank(),
axis.ticks = element_blank(),
plot.title=element_text(size=14, face="bold",hjust = 0.5))
read_counting_pie_chart <- ggplot(df_all_counts, aes(x="", y=number_of_counts, fill=groups))+
geom_bar(width = 1, stat = "identity") +
coord_polar("y", start=0) +
scale_fill_manual(values=c( "blue", "red", "gray")) +
blank_theme +
theme(axis.text.x=element_blank()) +
ggtitle("Counting percentages for all MAC mapped reads") +
labs(fill="")
read_counting_pie_chart
